import React, { useState } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import jsPDF from 'jspdf';



function SolarSavePage() {
  const [location, setLocation] = useState("");
  const [systemSize, setSystemSize] = useState(5);
  const [solarData, setSolarData] = useState(null);
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!location.trim()) {
      toast.error("‚ö†Ô∏è Please enter a valid location.");
      return;
    }
    fetchSolarData({ location, systemSizeKW: systemSize });
  };

  const handleUseMyLocation = () => {
    if (!navigator.geolocation) {
      toast.error("Geolocation is not supported by your browser.");
      return;
    }
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;
        fetchSolarData({ lat, lon, systemSizeKW: systemSize });
      },
      (error) => {
        console.error(error);
        toast.error("Failed to get your location. Please allow location access.");
      }
    );
  };

  const fetchSolarData = async (data) => {
    try {
      setLoading(true);
      setMessage("");
      const response = await axios.post("/solar", data);
      setSolarData(response.data);
      setLoading(false);
    } catch (error) {
      console.error(error);
      setSolarData(null);
      setLoading(false);
      if (error.response && error.response.data && error.response.data.error) {
        toast.error(`‚ö†Ô∏è ${error.response.data.error}`);
      } else {
        toast.error("‚ö†Ô∏è Failed to fetch solar data. Please try again.");
      }
    }
  };

  const generateSavingsData = (annualSavings) => {
    const savingsWithoutDollar = parseFloat(annualSavings.replace("$", ""));
    const data = [];
    let total = 0;
    for (let i = 1; i <= 10; i++) {
      total += savingsWithoutDollar;
      data.push({ year: `Year ${i}`, savings: Math.round(total) });
    }
    return data;
  };

  const downloadPDF = () => {
      if (!solarData) {
        toast.error("No solar data to generate report.");
        return;
      }
    
      const doc = new jsPDF();
    
      // SolarSave Report Header
      doc.setFontSize(24);
      doc.setFont("helvetica", "bold");
      doc.text("SolarSave", 105, 20, { align: "center" });
    
      doc.setFontSize(14);
      doc.setFont("helvetica", "normal");
      doc.text("Your Personalized Solar Energy Report", 105, 30, { align: "center" });
    
      // Divider Line
      doc.setLineWidth(0.5);
      doc.line(20, 38, 190, 38);
    
      // Location Section
      doc.setFontSize(16);
      doc.setFont("helvetica", "bold");
      doc.text("Location Information", 20, 50);
    
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.text(`Location: ${solarData.location}`, 20, 60);
      doc.text(`Latitude: ${solarData.lat}`, 20, 68);
      doc.text(`Longitude: ${solarData.lon}`, 20, 76);
      doc.text(`System Size Selected: ${solarData.systemSizeKW} kW`, 20, 84);
      doc.text(`Average Sun Hours/Day: ${solarData.avgSunHoursPerDay}`, 20, 92);
    
      // Savings Section
      doc.setFontSize(16);
      doc.setFont("helvetica", "bold");
      doc.text("Savings Information", 20, 110);
    
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.text(`Electricity Rate: ${solarData.electricityRate}`, 20, 120);
      doc.text(`Estimated Annual Savings: ${solarData.estimatedSavingsPerYear}`, 20, 128);
    
      // Environmental Impact Section
      doc.setFontSize(16);
      doc.setFont("helvetica", "bold");
      doc.text("Environmental Impact", 20, 146);
    
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.text(`CO2 Offset per Year: ${solarData.co2OffsetPerYear.replace("CO‚ÇÇ", "CO2")}`, 20, 156);
      doc.text(`Trees Planted Equivalent: ${solarData.treesPlantedEquivalent}`, 20, 164);
      doc.text(`Cars Taken Off the Road Equivalent: ${solarData.carsTakenOffRoadEquivalent}`, 20, 172);
    
      // Footer
      doc.setFontSize(10);
      doc.setFont("helvetica", "italic");
      doc.text("Generated by SolarSave", 105, 285, { align: "center" });
    
      // Save file
      doc.save("SolarSave_Report.pdf");
  };
  

  
  

  return (
    <div style={styles.page}>
      {loading && (
        <div style={styles.loadingOverlay}>
          <div style={styles.spinner}></div>
          <p style={styles.loadingText}>Calculating your solar savings...</p>
        </div>
      )}

      <h1 style={styles.title}>SolarSave üåû</h1>

      <form onSubmit={handleSubmit} style={styles.form}>
        <input
          type="text"
          placeholder="Enter your city, state, or zip code"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
          style={styles.input}
        />
        <div style={styles.dropdownContainer}>
          <label htmlFor="systemSize" style={styles.dropdownLabel}>
            System Size:
          </label>
          <select
            id="systemSize"
            value={systemSize}
            onChange={(e) => setSystemSize(parseInt(e.target.value))}
            style={styles.select}
          >
            <option value={3}>Small (3 kW)</option>
            <option value={5}>Standard (5 kW)</option>
            <option value={10}>Large (10 kW)</option>
          </select>
        </div>
        <button type="submit" style={styles.button}>
          Get Solar Data
        </button>
      </form>

      <button onClick={handleUseMyLocation} style={styles.locationButton}>
        Use My Current Location üìç
      </button>

      {message && <p style={styles.message}>{message}</p>}

      {solarData && (
        <div style={styles.resultBox}>
          <h2>Solar Data for {solarData.location || "your location"}</h2>
          <p><strong>Latitude:</strong> {solarData.lat}</p>
          <p><strong>Longitude:</strong> {solarData.lon}</p>
          <p><strong>Average Sun Hours/Day:</strong> {solarData.avgSunHoursPerDay} ‚òÄÔ∏è</p>
          <p><strong>System Size Selected:</strong> {solarData.systemSizeKW} kW</p>
          <p><strong>Electricity Rate:</strong> {solarData.electricityRate}</p>
          <p><strong>Estimated Annual Savings:</strong> {solarData.estimatedSavingsPerYear}</p>

          <h3 style={{ marginTop: "1.5rem" }}>üåé Environmental Impact</h3>
          <p><strong>CO‚ÇÇ Offset:</strong> {solarData.co2OffsetPerYear}</p>
          <p><strong>Trees Planted Equivalent:</strong> {solarData.treesPlantedEquivalent} üå≥</p>
          <p><strong>Cars Taken Off the Road Equivalent:</strong> {solarData.carsTakenOffRoadEquivalent} üöó</p>
          {/* üî• New Savings Graph */}
          <div style={{ marginTop: "2rem" }}>
            <h3>üìà Solar Savings Over 10 Years</h3>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={generateSavingsData(solarData.estimatedSavingsPerYear)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="year" />
                <YAxis tickFormatter={(value) => `$${value}`} />
                <Tooltip formatter={(value) => `$${value}`} />
                <Line type="monotone" dataKey="savings" stroke="#ff9900" strokeWidth={3} />
              </LineChart>
            </ResponsiveContainer>
            </div>
            <div style={{ marginTop: "2rem" }}>
              <button onClick={downloadPDF} style={styles.downloadButton}>
                üìÑ Download My Solar Report
              </button>
            </div>
        </div>)}
    </div>
  );
}

const styles = {
  page: {
    minHeight: "100vh",
    background: "linear-gradient(to left, #fceabb, #f8b500)",
    padding: "2rem",
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    textAlign: "center",
    position: "relative",
  },
  title: {
    fontSize: "2.5rem",
    marginBottom: "2rem",
    color: "#333",
  },
  form: {
    marginBottom: "1.5rem",
  },
  input: {
    padding: "10px",
    width: "280px",
    fontSize: "16px",
    marginRight: "10px",
    border: "1px solid #ccc",
    borderRadius: "5px",
  },
  dropdownContainer: {
    display: "inline-block",
    marginLeft: "10px",
  },
  dropdownLabel: {
    marginRight: "5px",
    fontSize: "16px",
    color: "#333",
  },
  select: {
    padding: "10px",
    fontSize: "16px",
    border: "1px solid #ccc",
    borderRadius: "5px",
  },
  button: {
    padding: "10px 20px",
    fontSize: "16px",
    backgroundColor: "#ff9900",
    color: "white",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
    marginTop: "10px",
  },
  locationButton: {
    marginTop: "1rem",
    padding: "10px 20px",
    fontSize: "16px",
    backgroundColor: "#007bff",
    color: "white",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
  },
  message: {
    marginTop: "1rem",
    fontSize: "16px",
    color: "#666",
  },
  resultBox: {
    marginTop: "2rem",
    backgroundColor: "#FCE5AE",
    padding: "2rem",
    borderRadius: "10px",
    boxShadow: "1px 4px 15px rgba(0, 0, 0, 0.1)",
    maxWidth: "600px",
    margin: "2rem auto",
  },
  loadingOverlay: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    backgroundColor: "rgba(255, 255, 255, 0.8)",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 10,
  },
  spinner: {
    width: "60px",
    height: "60px",
    border: "8px solid #ccc",
    borderTop: "8px solid #ff9900",
    borderRadius: "50%",
    animation: "spin 1s linear infinite",
  },
  loadingText: {
    marginTop: "1rem",
    fontSize: "1.2rem",
    color: "#555",
  },
};

export default SolarSavePage;
